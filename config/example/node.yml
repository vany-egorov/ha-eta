# Possible environments are numbers of:
#   "dev" - разработка;
#   "demo" - практически не используется. зарезервировано на всякий случай;
#   "test" - если например запускать тесты на CI, например подключается к особой тестовой базе, либо ставит везде is_test=true;
#   "prod" - [по-умолчанию] при запуске из пакетов, при наливке админами. Вся статика должна быть вкомпилина в бинарь;
environment: dev

# деманизироваться?
# [по-умолчанию] false
daemonize: false

# парамерты демона
daemon:
  # путь до pid файла
  # [по-умолчанию] [dev]  ../tmp/run/ha-eta-node.pid
  # [по-умолчанию] [prod] /run/ha-eta-node/ha-eta-node.pid
  pidfile: /run/ha-eta-node/ha-eta-node.pid

  # права pidfile
  # [по-умолчанию] 0664 | -rw-rw--w-
  pidfile-mode: 0644

  # рабочая директория
  # [по-умолчанию] не задана
  workdir: ""

  # [по-умолчанию] 0
  umask: 0

servers:
  -
    kind: inet
    # [по-умолчанию] 0.0.0.0
    host: 0.0.0.0
    # [по-умолчанию] - 9671
    port: 80
    tls:
      # [по-умолчанию] - false
      enable: false
      # [по-умолчанию] - не задано
      cert-file: "/etc/ha-eta-node/tls.cert"
      # [по-умолчанию] - не задано
      key-file: "/etc/ha-eta-node/tls.key"
  - kind: inet
    host: 127.0.0.1
    port: 9687
  - kind: unix
    # [по-умолчанию] - /run/ha-eta-node/ha-eta-node.sock
    addr: /run/ha-eta-node/ha-eta-node.sock

# Cross-Origin Resource Sharing (CORS) settings
cors:
  # on "dev" - "true" preferred
  # on "prod" - "false" preferred (use nginx instead)
  # [по-умолчанию] 0.0.0.0
  enable: false
  # [по-умолчанию] ["GET", "POST", "PUT",
  #                 "DELETE", "OPTIONS", "HEAD"]
  allow-methods: [
    "GET", "POST", "PUT",
    "DELETE", "OPTIONS", "HEAD"
  ]
  # [по-умолчанию] ["Authorization", "Content-Type", "Accept",
  #                 "Origin", "User-Agent", "DNT",
  #                 "Cache-Control", "X-Mx-ReqToken", "Keep-Alive",
  #                 "X-Requested-With", "If-Modified-Since", "Content-Disposition",
  #                 "X-Token"]
  allow-headers: [
    "Authorization", "Content-Type", "Accept",
    "Origin", "User-Agent", "DNT",
    "Cache-Control", "X-Mx-ReqToken", "Keep-Alive",
    "X-Requested-With", "If-Modified-Since", "Content-Disposition",
    "X-Token"
  ]
  allow-credentials: false
  # Выставить:
  #   Access-Control-Allow-Origin: *
  # Сhrome например не любит Access-Control-Allow-Origin: *. Выдаёт ошибку:
  #   Response to preflight request doesn't pass access control check:
  #   The value of the 'Access-Control-Allow-Origin'
  #   header in the response must not be the wildcard '*'
  #   when the request's credentials mode is 'include'
  # [по-умолчанию] false
  allow-all-origins: false

# периодичность выполнения фоновых задач
period:
  # Периодичесность отображения статистики рантайма
  # cat /var/log/transcoder*/access.log | grep MEMSTATS
  # [по-умолчанию] 60s
  memstats: 60s

# настройки логирования
log:
  # Путь до директории с *.log файлами
  # [по-умолчанию] /var/log/ha-eta-node
  path: "/var/log/ha-eta-node"
  # Possible levels are numbers or:
  #   trace    [min по-умолчанию]
  #       For pervasive information on states of all elementary constructs.
  #       Use 'Trace' for in-depth debugging to find problem parts of a function,
  #       to check values of temporary variables, etc.
  #   debug
  #       For detailed system behavior reports and diagnostic messages
  #       to help to locate problems during development.
  #   info
  #       For general information on the application's work.
  #       Use 'Info' level in your code so that you could leave it
  #       'enabled' even in production. So it is a 'production log level'.
  #   warn
  #       For indicating small errors, strange situations,
  #       failures that are automatically handled in a safe manner.
  #   error
  #       For severe failures that affects application's workflow,
  #       not fatal, however (without forcing app shutdown).
  #   critical [max по-умолчанию]
  #       For producing final messages before application’s death.
  #       После появления этого собщения приложение обычно выходит
  #       с ненулевым кодом возврата.
  #
  # map логгеров
  # loggers:
  #   {{ название логгера }}:
  #     # префикс, выставляемый перед каждой записью в лог.
  #     prefix: "~~~"
  #     # название файлов с логами. чтобы например какой-то логгер вытащить в отдельные файлы
  #     # [по-умолчанию] - { access: access.log, error: error.log }
  #     files: { access: access.log, error: error.log }
  #     # полные пути до файлов с логами. чтобы например какой-то логгер вытащить в другую директорию, в другой файл
  #     # [по-умолчанию] - пишетсы в единую папку, заданную выше
  #     files: { access: {{ @path + @files.access }}, error: {{ @path + @files.error }} }
  #   ...
  loggers:
    # Общия логгер;
    # Отображает последовательность фунций приложения:
    #   - обработка конфигов/флагов;
    #   - запуск фоновых worker'ов, poller'ов, dispatcher'ов;
    app:
      prefix: "[---]"
      level: { min: info, max: critical }
    http:
      prefix: "[HTTP]"
      level: { min: info, max: critical }
    # логгер статистики рантайма
    memstats:
      prefix: "[MEMSTATS]"
      level: { min: info, max: critical }
